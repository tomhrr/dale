#|
@module variant

Provides `def-variant`, which allows for defining variants, also known
as sum types or tagged unions.  Variant definition introduces the
following bindings:

   * a struct type for the variant;
   * a struct type for each of the variant's potential types;
   * constructors for each of the potential types, which take as their
     arguments the members for that potential type in definition
     order (if any);
   * a `case` form, which allows for executing a statement based on
     the underlying type of a particular variant.

For example:

        (def-variant Direction (North South East West))

        (def main (fn extern-c int (void)
          (let ((direction Direction (North)))
            (case direction
              (North (printf "Direction is north\n"))
              (true  (printf "Direction is not north\n"))))
          0))

yields:

        Direction is north

With parameters for the potential types:

        (def-variant Number ((Int    ((a int)))
                             (Float  ((a float)))))

        (def main (fn extern-c int (void)
          (let ((ni Number (Int 1))
                (nf Number (Float 2.0))
                (na (array-of 2 Number) (array ni nf)))
            (for (i \ 0) (< i 2) (incv i)
              (let ((nc Number (@$ na i)))
                (case nc
                  (Int    (printf "Number is int (%d)\n"    (@:@ nc a)))
                  (Float  (printf "Number is float (%f)\n"  (@:@ nc a)))))))
          0))

yields:

	Number is int (1)
	Number is float (2.000000)

The first element of each defined struct type is an `int` named
'type'.  This value will be 1 for the first potential type, 2 for the
second potential type, and so on.  This is a documented part of this
interface so as to support interoperating with C libraries that use
unions to achieve the same outcome.  (At the moment, there's no need
for customising the type of this first field, but that may be added
later.)

|#
(module variant (attr cto))

(import cstdio)
(import stdlib)
(import enum)

(using-namespace std.macros

(def prefix-token-node (fn extern (p DNode) ((mc (p MContext))
                                             (prefix (p (const char)))
                                             (node (p DNode)))
  (def buf (var auto (array-of 255 char)))
  (and (null (@:@ node token-str))
    (return (nullptr DNode)))
  (sprintf buf "%s%s" prefix (@:@ node token-str))
  (return (mnfv mc buf))))

(def create-struct-defs (fn intern (p DNode) ((mc (p MContext))
                                              (enumnode (p DNode))
                                              (instances (p DNode)))
  (let ((holder  \ (nullptr DNode))
        (last    \ (nullptr DNode))
        (current \ (@:@ instances list-node))
        (largest-alignment \ 0))
    (while (not (null current))
      (let ((has-args \ (not (null (@:@ current list-node)))))
        (and has-args
          (let ((struct-args \ (@:' current list-node next-node))
                (res \ false)
                (alignment \ 0))
            (setv res (eval-expression mc (q int)
                        (qq do (def ts (struct intern (uq struct-args)))
                               (cast (alignmentof ts) int))
                        (cast (# alignment) (p void))))
            (and res
              (setv largest-alignment
                    (if (> alignment largest-alignment)
                        alignment
                        largest-alignment))))))
      (setv current (@:@ current next-node)))
    (setv current (@:@ instances list-node))
    (while (not (null current))
      (let ((has-args \ (not (null (@:@ current list-node))))
            (name     \ (if has-args (@:@ current list-node) current))
            (args     \ (if has-args
                            (@:' current list-node next-node list-node)
                            (qq void)))
            (padding' \ (- largest-alignment (cast (sizeof int) int)))
            (padding  \ (if (> padding' 0)
                            padding'
                            0))
            (padding-node \ (mnfv mc padding))
            (struct-def \ (if has-args
                              (qq def (uq name)
                                (struct extern ((type (uq enumnode))
                                                (_padding (array-of (uq padding-node) uint8))
                                                (uql args))))
                              (qq def (uq name)
                                (struct extern ((type (uq enumnode))))))))
        (setv current (@:@ current next-node))
        (if (null holder)
            (setv holder struct-def)
            (setf (:@ last next-node) struct-def))
        (setv last struct-def)))
    (return (qq do (uql holder))))))

(def create-setf-forms (fn intern (p DNode) ((mc (p MContext))
                                             (args (p DNode)))
  (let ((holder  \ (nullptr DNode))
        (last    \ (nullptr DNode))
        (current \ (@:@ args list-node)))
    (while (not (null current))
      (let ((name \ (@:@ current list-node)))
        (and (null name)
          (do (report-error mc current "expected list for variant member")
              (return (nullptr DNode))))
        (let ((type \ (@:@ name next-node)))
          (and (null type)
            (do (report-error mc current "expected type for variant member")
                (return (nullptr DNode))))
          (let ((argset \ (qq setf (: my-variant (uq name)) (uq name))))
          (setv current (@:@ current next-node))
          (if (null holder)
              (setv holder argset)
              (setf (:@ last next-node) argset))
          (setv last argset)))))
    (return (qq do (uql holder))))))

(def create-constructors (fn intern (p DNode) ((mc (p MContext))
                                               (name (p DNode))
                                               (instances (p DNode)))
  (let ((holder  \ (nullptr DNode))
        (last    \ (nullptr DNode))
        (current \ (@:@ instances list-node)))
    (while (not (null current))
      (let ((has-args \ (not (null (@:@ current list-node))))
            (cname    \ (if has-args (@:@ current list-node) current))
            (args     \ (if has-args
                            (@:' current list-node next-node)
                            (qq void)))
            (setfs    \ (if has-args
                            (create-setf-forms mc args)
                            (qq do 0)))
            (ename    \ (prefix-token-node mc "_" cname))
            (constructor \
              (qq def (uq cname) (fn extern (retval (uq name)) (uq args)
                (def my-variant (var auto (uq cname)))
                (setf (: my-variant type) (uq ename))
                (uq setfs)
                (memcpy (cast retval (p void))
                        (cast (# my-variant) (p void))
                        (sizeof my-variant))
                (return))))
            (empty-constructor \
              (if has-args
                  (qq def (uq cname) (fn extern (retval (uq name)) (void)
                    (def my-variant (var auto (uq cname)))
                    (setf (: my-variant type) (uq ename))
                    (memcpy (cast retval (p void))
                            (cast (# my-variant) (p void))
                            (sizeof my-variant))
                    (return)))
                  (qq do (no-op))))
            (constructors \ (qq do (uq constructor)
                                   (uq empty-constructor))))
        (setv current (@:@ current next-node))
        (if (null holder)
            (setv holder constructors)
            (setf (:@ last next-node) constructors))
        (setv last constructors)))
    (def mholder (var auto (p DNode) (qq do (uql holder))))
    (return mholder))))

(def create-convert-fn (fn intern (p DNode) ((mc (p MContext))
                                             (enumnode (p DNode))
                                             (instances (p DNode)))
  (let ((holder  \ (nullptr DNode))
        (last    \ (nullptr DNode))
        (current \ (@:@ instances list-node)))
    (while (not (null current))
      (let ((has-args \ (not (null (@:@ current list-node))))
            (cname    \ (if has-args (@:@ current list-node) current))
            (qname    \ (std.macros.copy-qstr mc cname false))
            (pname    \ (prefix-token-node mc "_" cname))
            (cel      \ (qq (= 0 (strcmp str (uq qname))) (uq pname))))
        (setv current (@:@ current next-node))
        (if (null holder)
            (setv holder cel)
            (setf (:@ last next-node) cel))
        (setv last cel)))
    (setf (:@ last next-node)
      (qq true (cast ((uq enumnode) ((value -1))) (const (uq enumnode)))))
    (qq do
      (def _Convert (fn extern (uq enumnode) ((_unused (uq enumnode))
                                              (str (p (const char))))
        (def res (var auto \ (cond (uql holder))))
        res))))))

(def create-enum-elements (fn intern (p DNode) ((mc (p MContext))
                                                (instances (p DNode)))
  (let ((holder  \ (nullptr DNode))
        (last    \ (nullptr DNode))
        (current \ (@:@ instances list-node)))
    (while (not (null current))
      (let ((has-args \ (not (null (@:@ current list-node))))
            (cname    \ (if has-args (@:@ current list-node) current))
            (pname    \ (prefix-token-node mc "_" cname)))
        (setv current (@:@ current next-node))
        (setf (:@ pname next-node) (nullptr DNode))
        (if (null holder)
            (setv holder pname)
            (setf (:@ last next-node) pname))
        (setv last pname)))
    (return (qq (uql holder))))))

(def create-sizes-and-alignments (fn intern (p DNode) ((mc (p MContext))
                                                       (instances (p
                                                       DNode)))
  (let ((holder  \ (nullptr DNode))
        (last    \ (nullptr DNode))
        (current \ (@:@ instances list-node))
        (num     \ 0))
    (while (not (null current))
      (let ((has-args \ (not (null (@:@ current list-node))))
            (cname    \ (if has-args (@:@ current list-node) current))
            (cnode    \ (mnfv mc num))
            (mnode    \ (qq do
                          (setf ($ sizes (uq cnode))
                                (sizeof (uq cname)))
                          (setf ($ alignments (uq cnode))
                                (alignmentof (uq cname))))))
        (setv current (@:@ current next-node))
        (setf (:@ mnode next-node) (nullptr DNode))
        (incv num)
        (if (null holder)
            (setv holder mnode)
            (setf (:@ last next-node) mnode))
        (setv last mnode)))
    (return (qq do (uql holder))))))

(def create-variant-struct (fn intern (p DNode) ((mc (p MContext))
                                                 (name (p DNode))
                                                 (enumnode (p DNode))
                                                 (instances (p DNode)))
  (let ((lc \ (mnfv mc (list-count instances)))
        (sizes-and-alignments \ (create-sizes-and-alignments mc instances))
        (buf (array-of 255 char)))
    (gensym-var buf)
    (let ((maker-name \ (mnfv mc buf))
          (maker-node \ (qq (uq maker-name))))
      (qq do
        (def (uq maker-name)
          (macro extern (void)
            (def sizes (var auto (array-of (uq lc) size)))
            (def alignments (var auto (array-of (uq lc) size)))
            (uq sizes-and-alignments)
            (def max-size (var auto size 0))
            (def max-alignment (var auto size 0))
            (for (i \ 0) (< i (uq lc)) (incv i)
              (and (> (@$ sizes i) max-size)
                (setv max-size (@$ sizes i)))
              (and (> (@$ alignments i) max-alignment)
                (setv max-alignment (@$ alignments i))))
            (let ((padding \ (+ (- max-size (sizeof (uq enumnode)))
                                (% max-size max-alignment)))
                  (padding-node \ (std.macros.mnfv mc (cast padding int))))
              (std.macros.qq def (uq name)
                (struct extern ((type (uq enumnode))
                                (_unused (array-of
                                           (uq (uq padding-node))
                                           uint8))))))))
        (uq maker-node))))))

(def create-case (fn intern (p DNode) ((mc (p MContext))
                                       (name (p DNode))
                                       (enumnode (p DNode))
                                       (instances (p DNode)))
  (let ((lc \ (mnfv mc (list-count instances))))
    (qq do
      (def case (macro extern ((object (uq name)) rest)
        (and (null (@:@ object token-str))
          (do (report-error mc object "case expression must be variable name")
              (return (nullptr DNode))))

        (def found (var auto (array-of (uq lc) int)))
        (for (i \ 0) (< i (uq lc)) (incv i)
          (setf ($ found i) 0))
        (def otherwise (var auto bool false))

        (def arg-count (var auto \ (arg-count mc)))
        (setv arg-count (- arg-count 1))
        (def forms (var auto \ (std.macros.get-varargs-list mc arg-count rest)))

        (let ((holder  \ (nullptr DNode))
              (current \ (nullptr DNode)))
          (and (not (std.macros.is-empty-node forms))
            (while (not (null forms))
              (let ((first       \ (@:@ forms list-node))
                    (second      \ (@:@ first next-node))
                    (pname       \ (prefix-token-node mc "_" first))
                    (first-token \ (@:@ first token-str))
                    (is-true     \ (and (not (null first-token))
                                        (= 0 (strcmp first-token "true")))))
                (and (not is-true)
                  (do (def arg (var auto (uq enumnode) ((value -1))))
                      (def ev (var auto \ (_Convert arg first-token)))
                      (if (= (@: ev value) -1)
                          (do (report-error mc first "invalid variant type")
                              (return (nullptr DNode)))
                          (setf ($ found (@: ev value)) 1))))
                (def cond-form (var auto \
                  (cond (is-true
                         (std.macros.qq true (uq (uq second))))
                        ((null (@:@ forms next-node))
                         (std.macros.qq
                           true
                           (let ((ptr \ (cast (# (uq (uq object))) (p void)))
                                 ((uq (uq object))
                                   (p (uq (uq first)))
                                   (cast ptr (p (uq (uq first))))))
                             (uq (uq second)))))
                        (true
                         (std.macros.qq
                           (= (@: (uq (uq object)) type)
                              (uq (uq pname)))
                           (let ((ptr \ (cast (# (uq (uq object))) (p void)))
                                 ((uq (uq object))
                                   (p (uq (uq first)))
                                   (cast ptr (p (uq (uq first))))))
                              (uq (uq second))))))))
                (and is-true
                  (setv otherwise true))
                (if (null current)
                    (setv holder cond-form)
                    (setf (:@ current next-node) cond-form))
                (setv current cond-form)
                (setv forms (@:@ forms next-node)))))
          (and (not otherwise)
            (for (i \ 0) (< i (uq lc)) (incv i)
              (and (= 0 (@$ found i))
                (do (report-error mc object "case is non-exhaustive")
                    (return (nullptr DNode))))))
          (std.macros.qq do (cond (uq (uql holder)))))))))))

#|
@macro def-variant

@param name         The name of the new variant.
@param instances    The type definitions for the variant.
|#
(def def-variant (macro extern (name instances)
  (def enumnode (var auto \ (prefix-token-node mc "_Enum" name)))
  (and (null enumnode)
    (do (report-error mc name "atom required for variant name")
        (return (nullptr DNode))))
  (and (or (null instances)
           (null (@:@ instances list-node)))
    (do (report-error mc name "list required for variant members")
        (return (nullptr DNode))))
  (let ((lookupnode     \ (prefix-token-node mc "_Lookup" name))
        (struct-defs    \ (create-struct-defs mc enumnode instances))
        (constructors   \ (create-constructors mc name instances))
        (convert-fn     \ (create-convert-fn mc enumnode instances))
        (lc             \ (mnfv mc (list-count instances)))
        (enum-elements  \ (create-enum-elements mc instances))
        (variant-struct \ (create-variant-struct mc name enumnode instances))
        (case-def       \ (create-case mc name enumnode instances)))
    (qq do
      (def-enum (uq enumnode) extern int (uq enum-elements))
      (def (uq name) (struct extern))
      (uq struct-defs)
      (uq variant-struct)
      (uq constructors)
      (uq convert-fn)
      (uq case-def))))))
